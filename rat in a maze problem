#include <iostream>
using namespace std;

bool isSafe(int maze[4][4], int x, int y) {
    return (x >= 0 && x < 4 && y >= 0 && y < 4 && maze[x][y] == 1);
}

bool solveMazeUtil(int maze[4][4], int x, int y, int sol[4][4]) {
    if (x == 3 && y == 3 && maze[x][y] == 1) {
        sol[x][y] = 1;
        return true;
    }
    if (isSafe(maze, x, y)) {
        sol[x][y] = 1;
        if (solveMazeUtil(maze, x + 1, y, sol))
            return true;
        if (solveMazeUtil(maze, x, y + 1, sol))
            return true;
        sol[x][y] = 0;  // Backtrack
        return false;
    }
    return false;
}

void solveMaze(int maze[4][4]) {
    int sol[4][4] = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};
    if (!solveMazeUtil(maze, 0, 0, sol)) {
        cout << "Solution does not exist." << endl;
        return;
    }
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++)
            cout << sol[i][j] << " ";
        cout << endl;
    }
}

int main() {
    int maze[4][4] = {{1, 0, 0, 0}, {1, 1, 0, 1}, {0, 1, 0, 0}, {1, 1, 1, 1}};
    solveMaze(maze);
    return 0;
}
